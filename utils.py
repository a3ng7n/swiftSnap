# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####

'''
'''

import mathutils
import itertools

def write(filename, obj, stlfiles, refinestls,eMeshfiles, cast, snap, lays, locinmesh):

    shmd = open(filename,'w')
    shmd.write(foamHeader('dictionary','snappyHexMeshDict'))
    
    shmd.write("castellatedMesh %s;\n"%str(cast).lower());
    shmd.write("snap            %s;\n"%str(snap).lower());
    shmd.write("addLayers       %s;\n"%str(lays).lower());

    shmd.write("\ngeometry\n{\n")
    for stl in stlfiles:
        shmd.write("    " + stl[0] + "\n    {\n        type triSurfaceMesh;\n        name %s;\n    }\n"%stl[0][0:-4])
    for ref in refinestls:
        shmd.write("    " + ref[0] + "\n    {\n        type triSurfaceMesh;\n        name %s;\n    }\n"%ref[0][0:-4])
    shmd.write("};\n")
    
    shmd.write("\ncastellatedMeshControls\n{\n")
    
    shmd.write("    features\n    (\n")
    for em in eMeshfiles:
        shmd.write("        {\n            file \"" + em + "\";\n            level %s;\n        }\n"%em.strip('level.eMesh'))
    shmd.write("    );\n")

    shmd.write("    refinementSurfaces\n    {\n")
    for stl in stlfiles:
        min = stl[1]
        max = stl[2]
        shmd.write("        %s\n        {\n"%stl[0][0:-4])
        shmd.write("            level ({} {});\n".format(min,max))
        shmd.write("        }\n")
    shmd.write("    }\n")
    shmd.write("    refinementRegions\n    {\n")
    for ref in refinestls:
        dist = ref[2]
        level = ref[1]
        if ref[3]:
            mode = 'inside'
        else:
            mode = 'outside'
        shmd.write("        %s\n        {\n"%ref[0][0:-4])
        shmd.write("            mode %s;\n"%mode)
        shmd.write("            levels (({} {}));\n".format(dist, level)) #snappy allows for more freedom here!
        shmd.write("        }\n")
    shmd.write("    }\n")
    shmd.write("    locationInMesh ({} {} {});\n".format(*locinmesh))
    shmd.write(defaultSettingsCastMesh())

    shmd.write("\naddLayersControls\n{\n    layers\n    {\n")
    for stl in stlfiles:
        patchname = stl[0][0:-4]
        patchlayers = stl[3]
        shmd.write("        \"%s.*\"\n        {\n            "%patchname)
        shmd.write("nSurfaceLayers %s;\n        }\n"%patchlayers)
    shmd.write("    }\n")

    shmd.write(defaultSettingsLayers())



    shmd.write(defaultSettings())
    shmd.write("// ************************************************************************* //")
    shmd.close()
    return 0
    
def unique(seq): 
   # order preserving
   checked = []
   for e in seq:
       if e not in checked:
           checked.append(e)
   return checked

def makeBMD(path,verts, N):
    filename = 'blockMeshDict'
    f = open(path+'/' + filename, 'w')

    f.write(foamHeader('dictionary','blockMeshDict'))
    f.write('convertToMeters 1;\n\nvertices\n(\n')
    for v in verts:
        f.write('    ({} {} {})\n'.format(*v))
    f.write(');\n\n')
    f.write('blocks\n(\n')
    f.write('    hex (4 5 6 7 0 1 2 3) ({} {} {}) simpleGrading (1 1 1)\n'.format(*N))
    f.write(');\n\nedges\n(\n);\nboundary\n(\n);\nmergePatchPairs\n(\n);\n\n')
    f.close()
    return filename


def foamHeader(classtype, objecttype):
    return """/*--------------------------------*- C++ -*----------------------------------*/

// File was generated by SwiftSnap, a Blender 3D addon.

FoamFile
{{
    version     2.0;
    format      ascii;
    class       {};
    object      {};
}}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

""".format(classtype,objecttype)


def defaultSettings():
    return """
snapControls
{
    nSmoothPatch 3;
    tolerance 1.0;
    nSolveIter 300;
    nRelaxIter 5;
    nFeatureSnapIter 10;
}

meshQualityControls
{
    maxNonOrtho 65;
    maxBoundarySkewness 20;
    maxInternalSkewness 4;
    maxConcave 80;
    minVol 1e-13;
    minTetQuality 1e-30;
    minArea -1;
    minTwist 0.05;
    minDeterminant 0.001;
    minFaceWeight 0.05;
    minVolRatio 0.01;
    minTriangleTwist -1;
    nSmoothScale 4;
    errorReduction 0.75;
    relaxed
    {
        maxNonOrtho 75;
    }
}

debug 0;
mergeTolerance 1E-6;
"""

def defaultSettingsCastMesh():
    return """
    maxLocalCells 100000;
    maxGlobalCells 2000000;
    minRefinementCells 0;
    nCellsBetweenLevels 1;
    resolveFeatureAngle 30;
    allowFreeStandingZoneFaces true;
}
"""

def defaultSettingsLayers():
    return """
    relativeSizes true;
    expansionRatio 1.0;
    finalLayerThickness 0.3;
    minThickness 0.25;
    nGrow 0;
    featureAngle 30;
    nRelaxIter 5;
    nSmoothSurfaceNormals 1;
    nSmoothNormals 3;
    nSmoothThickness 10;
    maxFaceThicknessRatio 0.5;
    maxThicknessToMedialRatio 0.3;
    minMedianAxisAngle 90;
    nBufferCellsNoExtrude 0;
    nLayerIter 50;
    nRelaxedIter 20;
}
"""




